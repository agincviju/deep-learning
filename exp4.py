# -*- coding: utf-8 -*-
"""exp4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wK5jWQGe22gfReRoomK3gfX3iECnEjlA
"""

import tensorflow as tf
from tensorflow.keras import layers, models, regularizers, initializers
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.utils import to_categorical

(x_train, y_train), (x_test, y_test) = cifar10.load_data()

x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0

y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

def create_model(initializer, dropout_rate=0.0, regularize=None):
    model = models.Sequential([
        layers.Flatten(input_shape=(32, 32, 3)),
        layers.Dense(64, kernel_initializer=initializer,
                     kernel_regularizer=regularize, activation='relu'),
        layers.Dropout(dropout_rate),
        layers.Dense(32, kernel_initializer=initializer,
                     kernel_regularizer=regularize, activation='relu'),
        layers.Dense(10, activation='softmax')
    ])
    return model

xavier_initializer = initializers.GlorotNormal()
he_initializer = initializers.HeNormal()

xavier_model = create_model(
    initializer=xavier_initializer,
    dropout_rate=0.3,
    regularize=regularizers.L2(0.001)
)

he_model = create_model(
    initializer=he_initializer,
    dropout_rate=0.3,
    regularize=regularizers.L2(0.001)
)

for model in [xavier_model, he_model]:
    model.compile(optimizer='adam',
                  loss='categorical_crossentropy',
                  metrics=['accuracy'])

print("\nTraining Xavier Initialized Model...")
history_xavier = xavier_model.fit(
    x_train, y_train,
    epochs=10, batch_size=64,
    validation_data=(x_test, y_test),
    verbose=1
)

print("\nTraining He Initialized Model...")
history_he = he_model.fit(
    x_train, y_train,
    epochs=10, batch_size=64,
    validation_data=(x_test, y_test),
    verbose=1
)

print("\nFinal Test Accuracy (Xavier):", xavier_model.evaluate(x_test, y_test, verbose=0)[1])
print("Final Test Accuracy (He):", he_model.evaluate(x_test, y_test, verbose=0)[1])

import matplotlib.pyplot as plt

def plot_history(history, label_prefix):
    epochs = range(1, len(history.history['accuracy']) + 1)

    plt.figure(figsize=(12, 5))

    plt.subplot(1, 2, 1)
    plt.plot(epochs, history.history['accuracy'], label=f'{label_prefix} Train Acc')
    plt.plot(epochs, history.history['val_accuracy'], label=f'{label_prefix} Val Acc')
    plt.title(f'{label_prefix} Accuracy')
    plt.xlabel('Epoch')
    plt.ylabel('Accuracy')
    plt.legend()

    plt.subplot(1, 2, 2)
    plt.plot(epochs, history.history['loss'], label=f'{label_prefix} Train Loss')
    plt.plot(epochs, history.history['val_loss'], label=f'{label_prefix} Val Loss')
    plt.title(f'{label_prefix} Loss')
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.legend()

    plt.tight_layout()
    plt.show()

plot_history(history_xavier, 'Xavier')
plot_history(history_he, 'He')

